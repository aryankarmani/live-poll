{"ast":null,"code":"var _jsxFileName = \"/Users/divyansh/Downloads/Rishi_assign/client/src/contexts/PollContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { useSocket } from './SocketContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PollContext = /*#__PURE__*/createContext();\nexport const usePoll = () => {\n  _s();\n  const context = useContext(PollContext);\n  if (!context) {\n    throw new Error('usePoll must be used within a PollProvider');\n  }\n  return context;\n};\n_s(usePoll, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const PollProvider = ({\n  children\n}) => {\n  _s2();\n  const {\n    socket\n  } = useSocket();\n  const [currentPoll, setCurrentPoll] = useState(null);\n  const [pollHistory, setPollHistory] = useState([]);\n  const [chatMessages, setChatMessages] = useState([]);\n  const [isPollActive, setIsPollActive] = useState(false);\n  useEffect(() => {\n    if (!socket) return;\n\n    // Listen for poll events\n    socket.on('poll_started', poll => {\n      console.log('Poll started:', poll);\n      setCurrentPoll(poll);\n      setIsPollActive(true);\n    });\n    socket.on('poll_update', update => {\n      console.log('Poll update:', update);\n      setCurrentPoll(prev => {\n        if (!prev) return prev;\n        return {\n          ...prev,\n          responses: [...prev.responses, {\n            studentName: update.studentName,\n            answer: update.answer,\n            timestamp: new Date()\n          }]\n        };\n      });\n    });\n    socket.on('poll_ended', results => {\n      console.log('Poll ended:', results);\n      setCurrentPoll(null);\n      setIsPollActive(false);\n      setPollHistory(prev => [results, ...prev]);\n    });\n    socket.on('chat_message', message => {\n      console.log('Chat message:', message);\n      setChatMessages(prev => [...prev, message]);\n    });\n    socket.on('poll_status', status => {\n      if (status) {\n        setCurrentPoll(status);\n        setIsPollActive(true);\n      } else {\n        setCurrentPoll(null);\n        setIsPollActive(false);\n      }\n    });\n\n    // Request current poll status on connection\n    socket.emit('get_poll_status');\n    return () => {\n      socket.off('poll_started');\n      socket.off('poll_update');\n      socket.off('poll_ended');\n      socket.off('chat_message');\n      socket.off('poll_status');\n    };\n  }, [socket]);\n  const startPoll = (question, options) => {\n    if (socket) {\n      socket.emit('new_poll', {\n        question,\n        options\n      });\n    }\n  };\n  const endPoll = () => {\n    if (socket) {\n      socket.emit('end_poll');\n    }\n  };\n  const submitAnswer = (studentName, answer) => {\n    if (socket) {\n      socket.emit('poll_answer', {\n        studentName,\n        answer\n      });\n    }\n  };\n  const sendChatMessage = (senderName, message, senderType) => {\n    if (socket) {\n      socket.emit('chat_message', {\n        senderName,\n        message,\n        senderType\n      });\n    }\n  };\n  const value = {\n    currentPoll,\n    pollHistory,\n    chatMessages,\n    isPollActive,\n    startPoll,\n    endPoll,\n    submitAnswer,\n    sendChatMessage\n  };\n  return /*#__PURE__*/_jsxDEV(PollContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n_s2(PollProvider, \"6jmJov2A2vxdvbctJe8p3yoWhwk=\", false, function () {\n  return [useSocket];\n});\n_c = PollProvider;\nvar _c;\n$RefreshReg$(_c, \"PollProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","useSocket","jsxDEV","_jsxDEV","PollContext","usePoll","_s","context","Error","PollProvider","children","_s2","socket","currentPoll","setCurrentPoll","pollHistory","setPollHistory","chatMessages","setChatMessages","isPollActive","setIsPollActive","on","poll","console","log","update","prev","responses","studentName","answer","timestamp","Date","results","message","status","emit","off","startPoll","question","options","endPoll","submitAnswer","sendChatMessage","senderName","senderType","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/divyansh/Downloads/Rishi_assign/client/src/contexts/PollContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport { useSocket } from './SocketContext';\r\n\r\nconst PollContext = createContext();\r\n\r\nexport const usePoll = () => {\r\n  const context = useContext(PollContext);\r\n  if (!context) {\r\n    throw new Error('usePoll must be used within a PollProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const PollProvider = ({ children }) => {\r\n  const { socket } = useSocket();\r\n  const [currentPoll, setCurrentPoll] = useState(null);\r\n  const [pollHistory, setPollHistory] = useState([]);\r\n  const [chatMessages, setChatMessages] = useState([]);\r\n  const [isPollActive, setIsPollActive] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!socket) return;\r\n\r\n    // Listen for poll events\r\n    socket.on('poll_started', (poll) => {\r\n      console.log('Poll started:', poll);\r\n      setCurrentPoll(poll);\r\n      setIsPollActive(true);\r\n    });\r\n\r\n    socket.on('poll_update', (update) => {\r\n      console.log('Poll update:', update);\r\n      setCurrentPoll(prev => {\r\n        if (!prev) return prev;\r\n        return {\r\n          ...prev,\r\n          responses: [...prev.responses, {\r\n            studentName: update.studentName,\r\n            answer: update.answer,\r\n            timestamp: new Date()\r\n          }]\r\n        };\r\n      });\r\n    });\r\n\r\n    socket.on('poll_ended', (results) => {\r\n      console.log('Poll ended:', results);\r\n      setCurrentPoll(null);\r\n      setIsPollActive(false);\r\n      setPollHistory(prev => [results, ...prev]);\r\n    });\r\n\r\n    socket.on('chat_message', (message) => {\r\n      console.log('Chat message:', message);\r\n      setChatMessages(prev => [...prev, message]);\r\n    });\r\n\r\n    socket.on('poll_status', (status) => {\r\n      if (status) {\r\n        setCurrentPoll(status);\r\n        setIsPollActive(true);\r\n      } else {\r\n        setCurrentPoll(null);\r\n        setIsPollActive(false);\r\n      }\r\n    });\r\n\r\n    // Request current poll status on connection\r\n    socket.emit('get_poll_status');\r\n\r\n    return () => {\r\n      socket.off('poll_started');\r\n      socket.off('poll_update');\r\n      socket.off('poll_ended');\r\n      socket.off('chat_message');\r\n      socket.off('poll_status');\r\n    };\r\n  }, [socket]);\r\n\r\n  const startPoll = (question, options) => {\r\n    if (socket) {\r\n      socket.emit('new_poll', { question, options });\r\n    }\r\n  };\r\n\r\n  const endPoll = () => {\r\n    if (socket) {\r\n      socket.emit('end_poll');\r\n    }\r\n  };\r\n\r\n  const submitAnswer = (studentName, answer) => {\r\n    if (socket) {\r\n      socket.emit('poll_answer', { studentName, answer });\r\n    }\r\n  };\r\n\r\n  const sendChatMessage = (senderName, message, senderType) => {\r\n    if (socket) {\r\n      socket.emit('chat_message', { senderName, message, senderType });\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    currentPoll,\r\n    pollHistory,\r\n    chatMessages,\r\n    isPollActive,\r\n    startPoll,\r\n    endPoll,\r\n    submitAnswer,\r\n    sendChatMessage,\r\n  };\r\n\r\n  return (\r\n    <PollContext.Provider value={value}>\r\n      {children}\r\n    </PollContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}